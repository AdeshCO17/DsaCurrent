#Majority element
class Solution
{
    static int majorityElement(int a[], int size)
    {
       
       int count=0;
      int el=0;
       for(int i=0;i<a.length;i++){
      
           if(count==0){
               el=a[i];
               
           }
           if(el==a[i]){
               count++;
           }
           else{
               count--;
           }
       }
       int count2=0;
        for (int i = 0; i <a.length ; i++) {

            if(el==a[i]){
                count2++;
            }

        }
        if(count2>(float)size/(float)2){
            return el;
        }else{
            return -1;
        }
     
    }

# arr.set can replace the previous value at that index;
#plus one

class Solution {
    static ArrayList<Integer> increment(ArrayList<Integer> arr , int N) {
        
         int carry=1;
        for (int i = arr.size()-1; i>=0 ; i--) {
            int sum=arr.get(i)+carry;
            if(sum==10){
                
             
                arr.set(i,0);
                
                carry=1;
            }else {
              
              
                arr.set(i,sum);
                carry=0;
            }

        }
        
        if(carry==1){
          arr.add(0,1);
            
        }
        return arr;
        // code here
    }
};

#rearrage array of pos and neq
sol if order not matter and with constant space 
        for (int i = 0; i <arr.length ; i++) {
            for (int j = 0; j <arr.length-1-i ; j++) {
                if(arr[j]<arr[j+1]){
                    arr[j]=arr[j]^arr[j+1];
                    arr[j+1]=arr[j]^arr[j+1];
                    arr[j]=arr[j]^arr[j+1];
                }
            }
        }

        int j=0;
        for (int i = 0; i <arr.length ; i++) {
            if(arr[i]<0){
                j=i;
                break;
            }
        }
        int k=0;
        while (k<arr.length && j<arr.length){
            arr[k]=arr[k]^arr[j];
            arr[j]=arr[k]^arr[j];
            arr[k]=arr[k]^arr[j];
            j=j+1;
            k=k+2;
        }

sol2 order matter
 class Solution {

        void rearrange(int arr[], int n) {

        ArrayList<Integer> neg = new ArrayList<Integer>();
        ArrayList<Integer> pos = new ArrayList<Integer>();
        
        for (int i = 0; i < n; i++) {

            if (arr[i] < 0)
                neg.add(arr[i]);
            else
                pos.add(arr[i]);
        }

        int i = 0, j = 0, k = 0;
        while (i < neg.size() && j < pos.size()) {
            arr[k++] = pos.get(j++);
            arr[k++] = neg.get(i++);
        }
        while (j < pos.size()) { arr[k++] = pos.get(j++); }

        while (i < neg.size()) { arr[k++] = neg.get(i++); }
    }
}

// puzzel array

class Solution 
{ 
	public static long[] productExceptSelf(int nums[], int n) 
	{ 
          long temp[]=new long[nums.length];
          long left[]=new long[nums.length];
          long right[]=new long[nums.length];
          left[0]=1;
          right[nums.length-1]=1;
          
          for(int i=1;i<nums.length;i++){
              left[i]=nums[i-1]*left[i-1];
          }
          for(int i=nums.length-2;i>=0;i--){
              right[i]=nums[i+1]*right[i+1];
          }
          
          for(int i=0;i<nums.length;i++){
              temp[i]=left[i]*right[i];
          }
          
          
         
       
          return temp;
	} 
} 


